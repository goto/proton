syntax = "proto3";

package gotocompany.optimus.core.v1beta1;

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "gotocompany/optimus/core/v1beta1/status.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/goto/proton/optimus";
option java_multiple_files = true;
option java_outer_classname = "ResourceServiceManager";
option java_package = "com.gotocompany.proton.optimus";
// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    version: "0.1";
  };
  external_docs: {
    description: "Optimus Resource Management Service";
  }
  schemes: HTTP;
  host: "127.0.0.1:9100";
  base_path: "/api";
};

service ResourceService {
  // DeployResourceSpecification migrate all resource specifications of a datastore in project
  // State of the world request
  rpc DeployResourceSpecification(stream DeployResourceSpecificationRequest) returns (stream DeployResourceSpecificationResponse) {}
  // ListResourceSpecification lists all resource specifications of a datastore in project
  rpc ListResourceSpecification(ListResourceSpecificationRequest) returns (ListResourceSpecificationResponse) {
    option (google.api.http) = {
      get: "/v1beta1/project/{project_name}/namespace/{namespace_name}/datastore/{datastore_name}/resource"
    };
  }

  // Database CRUD
  // CreateResource registers a new resource of a namespace which belongs to a project
  rpc CreateResource(CreateResourceRequest) returns (CreateResourceResponse) {
    option (google.api.http) = {
      post: "/v1beta1/project/{project_name}/namespace/{namespace_name}/datastore/{datastore_name}/resource"
      body: "*"
    };
  }
  // ReadResource reads a provided resource spec of a namespace
  rpc ReadResource(ReadResourceRequest) returns (ReadResourceResponse) {
    option (google.api.http) = {
      get: "/v1beta1/project/{project_name}/namespace/{namespace_name}/datastore/{datastore_name}/resource/{resource_name}"
    };
  }
  // UpdateResource updates a resource specification of a datastore in project
  rpc UpdateResource(UpdateResourceRequest) returns (UpdateResourceResponse) {
    option (google.api.http) = {
      put: "/v1beta1/project/{project_name}/namespace/{namespace_name}/datastore/{datastore_name}/resource"
      body: "*"
    };
  }
  // UpsertResource updates/inserts a resource specification of a datastore in project
  rpc UpsertResource(UpsertResourceRequest) returns (UpsertResourceResponse) {
    option (google.api.http) = {
      post: "/v1beta1/project/{project_name}/namespace/{namespace_name}/datastore/{datastore_name}/resources-upsert"
      body: "*"
    };
  }

  // DeleteResource soft delete a specific resource
  rpc DeleteResource(DeleteResourceRequest) returns (DeleteResourceResponse) {
    option (google.api.http) = {
      delete: "/v1beta1/project/{project_name}/namespace/{namespace_name}/datastore/{datastore_name}/resource/{resource_name}"
    };
  }

  // ChangeJobNamespace move a job spec from one namespace to another
  rpc ChangeResourceNamespace(ChangeResourceNamespaceRequest) returns (ChangeResourceNamespaceResponse) {
    option (google.api.http) = {
      post: "/v1beta1/project/{project_name}/change-resource-namespace"
      body: "*"
    };
  }

  // apply a resource from optimus to datastore
  rpc ApplyResources(ApplyResourcesRequest) returns (ApplyResourcesResponse) {
    option (google.api.http) = {
      post: "/v1beta1/project/{project_name}/namespace/{namespace_name}/datastore/{datastore_name}/resources-apply"
      body: "*"
    };
  }

  // GetResourceChangelogs get all the change logs for a specific resource
  rpc GetResourceChangelogs(GetResourceChangelogsRequest) returns (GetResourceChangelogsResponse) {
    option (google.api.http) = {
      get: "/v1beta1/project/{project_name}/resource/{resource_name}/changelog"
    };
  }
}

message DeployResourceSpecificationRequest {
  string project_name = 1;
  string datastore_name = 2;
  repeated ResourceSpecification resources = 3;
  string namespace_name = 4;
}

message DeployResourceSpecificationResponse {
  reserved 1 to 4;
  Log log_status = 5;
}

// ListResourceSpecificationRequest lists all resource specifications of a datastore in project
message ListResourceSpecificationRequest {
  string project_name = 1;
  string datastore_name = 2;
  string namespace_name = 3;
}

message ListResourceSpecificationResponse {
  repeated ResourceSpecification resources = 1;
}

message CreateResourceRequest {
  string project_name = 1;
  string datastore_name = 2;
  ResourceSpecification resource = 3;
  string namespace_name = 4;
}

message CreateResourceResponse {
  bool success = 1;
  string message = 2;
}

message ReadResourceRequest {
  string project_name = 1;
  string datastore_name = 2;
  string resource_name = 3;
  string namespace_name = 4;
}

message ReadResourceResponse {
  bool success = 1;
  string message = 2;
  ResourceSpecification resource = 3;
}

message UpdateResourceRequest {
  string project_name = 1;
  string datastore_name = 2;
  ResourceSpecification resource = 3;
  string namespace_name = 4;
}

message UpdateResourceResponse {
  bool success = 1;
  string message = 2;
}

message UpsertResourceRequest {
  string project_name = 1;
  string datastore_name = 2;
  repeated ResourceSpecification resources = 3;
  string namespace_name = 4;
}

message UpsertResourceResponse {
  bool success = 1;
  string message = 2;
  repeated ResourceStatus results = 3;
  repeated string successful_resource_names = 4;
}

message ResourceStatus {
  string resource_name = 1;
  string status = 2;
  string message = 3;
}

message Deprecation {
  string reason = 1;
  google.protobuf.Timestamp date = 2;
  string replacement_table = 3;
}

// ResourceSpecification are datastore specification representation of a resource
message ResourceSpecification {
  reserved 3; // depricated "datastore"

  int32 version = 1;
  string name = 2;
  string type = 4;

  google.protobuf.Struct spec = 5;
  map<string, string> assets = 6;
  map<string, string> labels = 7;

  Deprecation deprecation = 8;
}

message ChangeResourceNamespaceRequest {
  string project_name = 1;
  string namespace_name = 2;
  string datastore_name = 3;
  string resource_name = 4;
  string new_namespace_name = 5;
}

message ChangeResourceNamespaceResponse {}

message ApplyResourcesRequest {
  string project_name = 1;
  string namespace_name = 2;
  string datastore_name = 3;
  repeated string resource_names = 4;
}

message ApplyResourcesResponse {
  message ResourceStatus {
    string resource_name = 1;
    string status = 2;
    string reason = 3;
  }

  repeated ResourceStatus statuses = 1;
}

message DeleteResourceRequest {
  string project_name = 1;
  string namespace_name = 2;
  string datastore_name = 3;
  string resource_name = 4;
  bool force = 5;
}

message DeleteResourceResponse {
  repeated string downstream_jobs = 1;
}

message GetResourceChangelogsRequest {
  string project_name = 1;
  string resource_name = 2;
}

message ResourceChange {
  string attribute_name = 1;
  string diff = 2;
}

message ResourceChangelog {
  string event_type = 1;
  string timestamp = 2;
  repeated ResourceChange change = 3;
}

message GetResourceChangelogsResponse {
  repeated ResourceChangelog history = 1;
}